    public class dal
    {
        DataTable GetDataTable(string storeProcedureName, object[] spParameterValues = null)
        {
            DataTable dataTable = new DataTable();

            SqlCommand command = spParameterValues == null ? dal.GetStoredProcCommand(storeProcedureName) : dal.GetStoredProcCommand(storeProcedureName, spParameterValues);
            //Execute Query

            return dataTable;

        }
        public static SqlCommand GetStoredProcCommand(string storedProcedureName)
        {
            if (string.IsNullOrEmpty(storedProcedureName))
                throw new ArgumentException("Error");
            return dal.CreateCommandByCommandType(CommandType.StoredProcedure, storedProcedureName);
        }
        public static SqlCommand CreateCommandByCommandType(
            CommandType commandType,
            string commandText)
        {
            SqlCommand command = new SqlCommand();
            command.CommandType = commandType;
            command.CommandText = commandText;
            return command;
        }


        public static SqlCommand GetStoredProcCommand(
            string storedProcedureName,
            params object[] parameterValues)
        {
            if (string.IsNullOrEmpty(storedProcedureName))
                throw new ArgumentException("Error");
            SqlCommand commandByCommandType = dal.CreateCommandByCommandType(CommandType.StoredProcedure, storedProcedureName);
            dal.AssignParameters(commandByCommandType, parameterValues);
            return commandByCommandType;
        }

        public static void AssignParameters(SqlCommand command, object[] parameterValues)
        {
            if (!dal.SameNumberOfParametersAndValues(command, parameterValues))
                throw new InvalidOperationException("");
            dal.AssignParameterValues(command, parameterValues);
        }

        public static bool SameNumberOfParametersAndValues(SqlCommand command, object[] values)
        {
            return command.Parameters.Count == values.Length;
        }


        public static void AssignParameterValues(SqlCommand command, object[] values)
        {
            int num = 0;
            for (int index = 0; index < values.Length; ++index)
            {
                IDataParameter parameter = (IDataParameter)command.Parameters[index + num];
                dal.SetParameterValue(command, parameter.ParameterName, values[index]);
            }
        }

        public static void SetParameterValue(SqlCommand command, string parameterName, object value)
        {
            if (command == null)
                throw new ArgumentNullException(nameof(command));
            command.Parameters[dal.BuildParameterName(parameterName)].Value = value ?? (object)DBNull.Value;
        }

        public static string BuildParameterName(string name)
        {
            return name;
        }
    }
